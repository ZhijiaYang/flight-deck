// Code generated by MockGen. DO NOT EDIT.
// Source: ../component/manager.go

// Package mock_component is a generated GoMock package.
package mock_component

import (
	component "component"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Components mocks base method
func (m *MockManager) Components() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Components")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Components indicates an expected call of Components
func (mr *MockManagerMockRecorder) Components() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Components", reflect.TypeOf((*MockManager)(nil).Components))
}

// Spec mocks base method
func (m *MockManager) Spec(compName string) (component.Spec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spec", compName)
	ret0, _ := ret[0].(component.Spec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spec indicates an expected call of Spec
func (mr *MockManagerMockRecorder) Spec(compName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spec", reflect.TypeOf((*MockManager)(nil).Spec), compName)
}

// Excute mocks base method
func (m *MockManager) Excute(compName, cmd, kubeConfig string, input map[string]string, namespace, id string) (error, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Excute", compName, cmd, kubeConfig, input, namespace, id)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(map[string]string)
	return ret0, ret1
}

// Excute indicates an expected call of Excute
func (mr *MockManagerMockRecorder) Excute(compName, cmd, kubeConfig, input, namespace, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Excute", reflect.TypeOf((*MockManager)(nil).Excute), compName, cmd, kubeConfig, input, namespace, id)
}
