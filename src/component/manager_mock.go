// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_component is a generated GoMock package.
package component

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Components mocks base method
func (m *MockManager) Components() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Components")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Components indicates an expected call of Components
func (mr *MockManagerMockRecorder) Components() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Components", reflect.TypeOf((*MockManager)(nil).Components))
}

// Input mocks base method
func (m *MockManager) Input(component string) (map[string][2]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", component)
	ret0, _ := ret[0].(map[string][2]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Input indicates an expected call of Input
func (mr *MockManagerMockRecorder) Input(component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockManager)(nil).Input), component)
}

// Output mocks base method
func (m *MockManager) Output(component string) (map[string][2]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", component)
	ret0, _ := ret[0].(map[string][2]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output
func (mr *MockManagerMockRecorder) Output(component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockManager)(nil).Output), component)
}

// Excute mocks base method
func (m *MockManager) Excute(component, cmd, kubeConfig string, input map[string]string, namespace, id string) (error, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Excute", component, cmd, kubeConfig, input, namespace, id)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// Excute indicates an expected call of Excute
func (mr *MockManagerMockRecorder) Excute(component, cmd, kubeConfig, input, namespace, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Excute", reflect.TypeOf((*MockManager)(nil).Excute), component, cmd, kubeConfig, input, namespace, id)
}
